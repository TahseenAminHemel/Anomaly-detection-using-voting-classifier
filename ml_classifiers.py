# -*- coding: utf-8 -*-
"""ML Classifiers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11uycy2r0ssxP2HyxOK3viWlu8e2LK05b
"""

# Importing the necessary libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Mounting Google drive to read the file from drive

from google.colab import drive
drive.mount('/content/drive/')

# Loading the data in Pandas dataframe

data = pd.read_csv('/content/drive/My Drive/Colab Notebooks/MRP/creditcard.csv')

# Splitting the data in test and train set

from sklearn.model_selection import train_test_split
X = data.drop('Class',axis=1).values
y = data['Class'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=101)

# Normalizing the data

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Implementing 5 different classifiers and a voting classifier; Training them with the data

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import VotingClassifier

clf1 = LogisticRegression(random_state=1)
clf2 = DecisionTreeClassifier()
clf3 = GaussianNB()
clf4 = MLPClassifier()
clf5 = SVC(kernel='linear', C=1.0, random_state=1)

clf1.fit(X_train, y_train)
clf2.fit(X_train, y_train)
clf3.fit(X_train, y_train)
clf4.fit(X_train, y_train)
clf5.fit(X_train, y_train)

eclf = VotingClassifier(
       estimators=[('lr', clf1), ('dt', clf2), ('gnb', clf3), ('mlp', clf4), ('svc', clf5)], 
       voting='hard')

scores = cross_val_score(eclf, X_test, y_test, scoring='accuracy', cv = 10)

print("Accuracy: %0.2f" % (scores.mean()))

# Classification report of the voting classifier

from sklearn.metrics import classification_report, confusion_matrix
eclf.fit(X_train, y_train)
predictions = eclf.predict(X_test)
print(classification_report(y_test, predictions))

# Confusion matrix for the voting classifier performance

confusion_matrix(y_test,predictions)

# RMSE for training data and test data

from sklearn import metrics

pred = eclf.predict(X_train)
score = np.sqrt(metrics.mean_squared_error(pred, y_train))
print(f"legitimate Score (RMSE): {score}")

pred = eclf.predict(X_test)
score = np.sqrt(metrics.mean_squared_error(pred, y_test))
print(f"anomaly Score (RMSE): {score}")